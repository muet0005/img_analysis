import os as os
import sys as sys
import csv as csv
import pwd
import numpy as np
import shutil as shutil
import nibabel as nb
from nibabel import nifti1 as nii
import nipype.interfaces.fsl as fsl
import nipype.interfaces.freesurfer as freesurfer
from nipype.interfaces.base import Undefined
import subprocess as sp
import socket as socket
import datetime as datetime
import argparse as argparse
import MySQLdb as mysqldb


__author__ = "Ryan Muetzel"
__license__ = "GPL"
__version__ = "0.2"


class qdec_clusters():
    def __init__(self, subjects_dir):
        """
        Required Arguments:
            subjects_dir = location of freesurfer data foldres.
        """
        self.subjects_dir = subjects_dir
        os.environ['SUBJECTS_DIR'] = subjects_dir
    
    def mapQdecLabel2Subjects(self, label, hemi, **kwargs):
        """
        Use mri_label2label to map label file from qdec to each subject.
        
        Required arguments:
            
            label = full path to the + name of the label file.
            
            hemi = hemisphere. lh or rh.
        
        Optional arguments:
            
            fsaverage = default is fsaverage. can specify custom template. Wherever the label was drawn on.
            
            regmethod. default is surface. volume is option as well.
             
            subjects. List type. If you want to run on a subset.  Otherwise, the default to to use the full subjects_dir listing.
            
            overwrite. boolean. if specified, label files existing in subject folder will be overwritten. otherwise skipped. default is False.
            
        """
        subjects = os.listdir(self.subjects_dir)
        measure = 'thickness'
        fsaverage = 'fsaverage'
        regmethod = 'surface'
        overwrite = False
        for i in kwargs.keys():
            if i == 'measure':
                measure = kwargs[i]
            elif i == 'fsaverage':
                fsaverage = kwargs[i]
            elif i == 'regmethod':
                regmethod = kwargs[i]
            elif i == 'overwrite':
                overwrite = True
            elif i == 'subjects':
                if type(kwargs[i]) is list:
                    subjects = kwargs[i]
        exclude = ('knicr', 'fsaverage')
        for s in subjects:
            if s.startswith(exclude) or not os.path.exists(os.path.join(self.subjects_dir, s, 'label')):
                #get rid of the riff raff
                continue
            if os.path.exists(os.path.join(self.subjects_dir, s, 'label', os.path.basename(label) + '.label')):
                if not overwrite:
                    continue
            label2label = freesurfer.MRILabel2Label(srclabel=label, srcsubject=fsaverage, trgsubject=s, trglabel=os.path.basename(label), hemi=hemi, regmethod=regmethod)
            label2label.run()
    
    def computeQdecLabelStats(self, label, hemi, **kwargs):
        """
        Required Arguments:
            label. Just give the full path to the original qdec label. I'll figure out the rest.
            
            hemi = lh or rh
        
        Optional Arguments:
        Measure: This is the kind of stats to extract. Options are thickness, lgi, and area.
            The default is thicknes. However, the area measure here is white matter surface area. If area is specified, pial surface area is extracted.
        """
        subjects = os.listdir(self.subjects_dir)
        measure = 'thickness'
        overwrite = False
        for i in kwargs.keys():
            if i == 'measure':
                measure = kwargs[i]
            elif i == 'overwrite':
                overwrite = True
            elif i == 'subjects':
                if type(kwargs[i]) is list:
                    subjects = kwargs[i]
        exclude = ('knicr', 'fsaverage')
        for s in subjects:
            label = os.path.join(self.subjects_dir, s, 'label', os.path.basename(label) + '.label')
            if not os.path.exists(label) or s.startswith(exclude):
                continue
            oFile = os.path.join(self.subjects_dir, s, 'stats', os.path.basename(label) + '.' + measure + '.stats')
            stats = freesurfer.MRISAnatomicalStats(labelfile=label, tabular=True, tablefile=oFile, hemi=hemi, subject=s)
            if measure == 'thickness':
                stats.inputs.thicknessfile = hemi + '.thickness'
            elif measure == 'lgi':
                stats.inputs.thicknessfile = hemi + '.pial_lgi'
            elif measure == 'area':
                stats.inputs.surface = 'pial'
            stats.run()
    


    




                