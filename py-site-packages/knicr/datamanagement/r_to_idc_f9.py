import os as os
import sys as sys
import csv as csv
import dicom as pd
import tarfile as tarfile

class cvtRtoIDC():
    def __init__(self, **kwargs):
        self.idcDir = '/Users/rmuetzel/Desktop/focus_at_9_idc'
        self.baseName = 'Ryan_MRI_02-12-2013_01-09-2014_ReadyforConversion'
        for k in kwargs.keys():
            if k == 'idcDir':
                self.idcDir = kwargs[k]
            elif k == 'baseName':
                self.baseName = kwargs[k]
        self.idcLink = os.path.join(self.idcDir, self.baseName + '.tar')
        if not os.path.exists(self.idcLink):
            print 'Cannot Find IDC link file: ', self.idcLink
            sys.exit(9)
    
    def readIdcLink(self):
        #First, open the tar file into memory
        tar = tarfile.open(self.idcLink)
        f = False
        #find the csv file inside the archive (should only be 1)
        for m in tar.getmembers():
            #make sure it has the right name!
            if m.path == self.baseName + '.csv':
                #pull out that one file
                f = tar.extractfile(m)
            if not f:
                print 'Cannot find the idc link file in the tar file...'
                print self.idcLink, self.baseName
                return
            #read the data into memory, let it know it is csv data
            content = csv.reader(f.readlines(), delimiter=',')
            #dump the data into a list 
            self.idcLinkData = []
            for i in content:
                self.idcLinkData.append(i)
            #assume the first line is the header information
            #store that info into a dictionary for use later
            self.headerDict = {}
            for i in self.idcLinkData[0]:
                self.headerDict[i] = self.idcLinkData[0].index(i)
            #now set up a dictonary based on the session UUID of the dicom
            if not self.headerDict.has_key('rnummer'):
                return False
            self.uuidDict = {}
            for i in self.idcLinkData:
                if i[self.headerDict['rnummer']] == 'rnummer':
                    continue
                self.uuidDict[i[self.headerDict['ScanUUID_DICOM']]] = i
            return True

    
    def getIdc(self, xnat_session, dcm):
        #make sure the dicom file exists
        if not os.path.exists(dcm):
            print 'Cannot find dicom: ', dcm
            return False
        #get the UUID in that dicom
        dcmUUID = pd.read_file(dcm).StudyInstanceUID
        IDC = False
        #see if that UUID is ready to be converted
        if self.uuidDict.has_key(dcmUUID):
            #if so, make sure the xnat session you think it is, is the real xnat session
            if self.uuidDict[dcmUUID][self.headerDict['xnat_session']] == xnat_session:
                #if so, get the IDC associated with that UUID
                IDC =  self.uuidDict[dcmUUID][self.headerDict['IDC']]
        return IDC, dcmUUID
    

